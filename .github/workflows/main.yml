name: Auto-Build CoreDNS with Fanout
on:
  schedule:
    - cron: 0 0 * * *  # runs daily at midnight
  workflow_dispatch:  # Manual execution allowed

jobs:
  # This job retrieves the latest release tags from CoreDNS and Fanout,
  # and then combines them (e.g. "v1.12.1-v1.11.3") to be used as part
  # of the Docker image tag.
  get-release-tags:
    name: Get Combined Release Tags
    runs-on: ubuntu-latest
    outputs:
      combined_release: ${{ steps.combine.outputs.combined_release }}
    steps:
      - name: Get Latest CoreDNS Release Tag
        id: coredns_release
        uses: actions/github-script@v7
        with:
          script: |
            // Call GitHub API to get the latest release for CoreDNS
            const { data } = await github.rest.repos.getLatestRelease({
              owner: 'coredns',
              repo: 'coredns'
            });
            core.setOutput('tag', data.tag_name);

      - name: Get Latest Fanout Release Tag
        id: fanout_release
        uses: actions/github-script@v7
        with:
          script: |
            // Call GitHub API to get the latest release for Fanout
            const { data } = await github.rest.repos.getLatestRelease({
              owner: 'networkservicemesh',
              repo: 'fanout'
            });
            core.setOutput('tag', data.tag_name);

      - name: Combine Release Tags
        id: combine
        run: |
          # Combine both tags with a hyphen separator (e.g. "v1.12.1-v1.11.3")
          COMBINED_RELEASE_TAG="${{ steps.coredns_release.outputs.tag }}-${{ steps.fanout_release.outputs.tag }}"
          echo "Combined Release Tag: ${COMBINED_RELEASE_TAG}"
          echo "combined_release=${COMBINED_RELEASE_TAG}" >> $GITHUB_OUTPUT

  # This job builds the Go binary and Docker image for each architecture.
  # The matrix strategy runs one job for "amd64" and another for "arm64".
  build:
    name: Build and Push Docker Images
    needs: get-release-tags
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    env:
      COMBINED_RELEASE_TAG: ${{ needs.get-release-tags.outputs.combined_release }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          sudo apt update && sudo apt upgrade -y
          sudo apt install -y golang make

      - name: Get CoreDNS & Plugin
        run: |
          git clone https://github.com/coredns/coredns.git
          cd coredns
          echo "fanout:github.com/networkservicemesh/fanout" >> plugin.cfg

      - name: Build CoreDNS
        run: |
          cd coredns
          make

      # Set up BuildKit Docker container builder to be able to build
      # multi-platform images and export cache
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v5
        with:
          context: coredns/
          file: coredns/Dockerfile
          push: true
          # Build for the target platform. In this case, our Dockerfile simply copies the precompiled binary.
          platforms: "linux/${{ matrix.arch }}"
          tags: |
            tomtonic/coredns-fanout:${{ env.COMBINED_RELEASE_TAG }}-${{ matrix.arch }}
            tomtonic/coredns-fanout:latest-${{ matrix.arch }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ---------------------------------------------------------------------------
  # Job: Create and Push Manifest (Multi-Arch Image)
  # In this job the separate architecture-specific images are combined
  # into a multi-arch manifest so that a single tag (without an arch suffix)
  # can be used to pull the appropriate image automatically.
  # ---------------------------------------------------------------------------
#  manifest:
#    name: Create and Push Docker Manifest
#    needs: [build, get-release-tags] # get-release-tags also needs to be mentioned here to be able to access its OUTPUT, i.e., access needs.get-release-tags.outputs.combined_release below
#    runs-on: ubuntu-latest
#    env:
#      COMBINED_RELEASE_TAG: ${{ needs.get-release-tags.outputs.combined_release }}
#    steps:
#      - name: Log in to Docker Hub
#        uses: docker/login-action@v3
#        with:
#          username: ${{ vars.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}
#
#      - name: Create and Push Manifest for Release Tag
#        run: |
#          echo "Creating manifest for tag: ${{ env.COMBINED_RELEASE_TAG }}"
#          # Create a manifest list that includes both architecture-specific images.
#          docker manifest create --amend tomtonic/coredns-fanout:${{ env.COMBINED_RELEASE_TAG }} \
#            tomtonic/coredns-fanout:${{ env.COMBINED_RELEASE_TAG }}-amd64 \
#            tomtonic/coredns-fanout:${{ env.COMBINED_RELEASE_TAG }}-arm64
#
#          # Annotate the images to specify the architecture.
#          docker manifest annotate tomtonic/coredns-fanout:${{ env.COMBINED_RELEASE_TAG }} \
#            tomtonic/coredns-fanout:${{ env.COMBINED_RELEASE_TAG }}-amd64 --os linux --arch amd64
#
#          docker manifest annotate tomtonic/coredns-fanout:${{ env.COMBINED_RELEASE_TAG }} \
#            tomtonic/coredns-fanout:${{ env.COMBINED_RELEASE_TAG }}-arm64 --os linux --arch arm64
#
#          # Push the multi-arch manifest so that pulling this tag selects the correct image.
#          docker manifest push tomtonic/coredns-fanout:${{ env.COMBINED_RELEASE_TAG }}
#
#      - name: Create and Push Manifest for "latest" Tag
#        run: |
#          echo "Creating manifest for tag: latest"
#          # Optionally, create a "latest" manifest pointing to the same images.
#          docker manifest create --amend tomtonic/coredns-fanout:latest \
#            tomtonic/coredns-fanout:latest-amd64 \
#            tomtonic/coredns-fanout:latest-arm64
#
#          docker manifest annotate tomtonic/coredns-fanout:latest \
#            tomtonic/coredns-fanout:latest-amd64 --os linux --arch amd64
#
#          docker manifest annotate tomtonic/coredns-fanout:latest \
#            tomtonic/coredns-fanout:latest-arm64 --os linux --arch arm64
#
#          docker manifest push tomtonic/coredns-fanout:latest
#
